// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hyq {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class HyqLogin;

// ===================================================================

class HyqLogin : public ::google::protobuf::Message {
 public:
  HyqLogin();
  virtual ~HyqLogin();
  
  HyqLogin(const HyqLogin& from);
  
  inline HyqLogin& operator=(const HyqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HyqLogin& default_instance();
  
  void Swap(HyqLogin* other);
  
  // implements Message ----------------------------------------------
  
  HyqLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HyqLogin& from);
  void MergeFrom(const HyqLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);
  
  // required string channelAccountId = 2;
  inline bool has_channelaccountid() const;
  inline void clear_channelaccountid();
  static const int kChannelAccountIdFieldNumber = 2;
  inline const ::std::string& channelaccountid() const;
  inline void set_channelaccountid(const ::std::string& value);
  inline void set_channelaccountid(const char* value);
  inline void set_channelaccountid(const char* value, size_t size);
  inline ::std::string* mutable_channelaccountid();
  inline ::std::string* release_channelaccountid();
  
  // optional string loginToken = 3;
  inline bool has_logintoken() const;
  inline void clear_logintoken();
  static const int kLoginTokenFieldNumber = 3;
  inline const ::std::string& logintoken() const;
  inline void set_logintoken(const ::std::string& value);
  inline void set_logintoken(const char* value);
  inline void set_logintoken(const char* value, size_t size);
  inline ::std::string* mutable_logintoken();
  inline ::std::string* release_logintoken();
  
  // @@protoc_insertion_point(class_scope:hyq.HyqLogin)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_channelaccountid();
  inline void clear_has_channelaccountid();
  inline void set_has_logintoken();
  inline void clear_has_logintoken();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* channelaccountid_;
  ::std::string* logintoken_;
  ::google::protobuf::int32 channelid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  void InitAsDefaultInstance();
  static HyqLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// HyqLogin

// required int32 channelId = 1;
inline bool HyqLogin::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HyqLogin::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HyqLogin::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HyqLogin::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 HyqLogin::channelid() const {
  return channelid_;
}
inline void HyqLogin::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
}

// required string channelAccountId = 2;
inline bool HyqLogin::has_channelaccountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HyqLogin::set_has_channelaccountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HyqLogin::clear_has_channelaccountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HyqLogin::clear_channelaccountid() {
  if (channelaccountid_ != &::google::protobuf::internal::kEmptyString) {
    channelaccountid_->clear();
  }
  clear_has_channelaccountid();
}
inline const ::std::string& HyqLogin::channelaccountid() const {
  return *channelaccountid_;
}
inline void HyqLogin::set_channelaccountid(const ::std::string& value) {
  set_has_channelaccountid();
  if (channelaccountid_ == &::google::protobuf::internal::kEmptyString) {
    channelaccountid_ = new ::std::string;
  }
  channelaccountid_->assign(value);
}
inline void HyqLogin::set_channelaccountid(const char* value) {
  set_has_channelaccountid();
  if (channelaccountid_ == &::google::protobuf::internal::kEmptyString) {
    channelaccountid_ = new ::std::string;
  }
  channelaccountid_->assign(value);
}
inline void HyqLogin::set_channelaccountid(const char* value, size_t size) {
  set_has_channelaccountid();
  if (channelaccountid_ == &::google::protobuf::internal::kEmptyString) {
    channelaccountid_ = new ::std::string;
  }
  channelaccountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HyqLogin::mutable_channelaccountid() {
  set_has_channelaccountid();
  if (channelaccountid_ == &::google::protobuf::internal::kEmptyString) {
    channelaccountid_ = new ::std::string;
  }
  return channelaccountid_;
}
inline ::std::string* HyqLogin::release_channelaccountid() {
  clear_has_channelaccountid();
  if (channelaccountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelaccountid_;
    channelaccountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string loginToken = 3;
inline bool HyqLogin::has_logintoken() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HyqLogin::set_has_logintoken() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HyqLogin::clear_has_logintoken() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HyqLogin::clear_logintoken() {
  if (logintoken_ != &::google::protobuf::internal::kEmptyString) {
    logintoken_->clear();
  }
  clear_has_logintoken();
}
inline const ::std::string& HyqLogin::logintoken() const {
  return *logintoken_;
}
inline void HyqLogin::set_logintoken(const ::std::string& value) {
  set_has_logintoken();
  if (logintoken_ == &::google::protobuf::internal::kEmptyString) {
    logintoken_ = new ::std::string;
  }
  logintoken_->assign(value);
}
inline void HyqLogin::set_logintoken(const char* value) {
  set_has_logintoken();
  if (logintoken_ == &::google::protobuf::internal::kEmptyString) {
    logintoken_ = new ::std::string;
  }
  logintoken_->assign(value);
}
inline void HyqLogin::set_logintoken(const char* value, size_t size) {
  set_has_logintoken();
  if (logintoken_ == &::google::protobuf::internal::kEmptyString) {
    logintoken_ = new ::std::string;
  }
  logintoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HyqLogin::mutable_logintoken() {
  set_has_logintoken();
  if (logintoken_ == &::google::protobuf::internal::kEmptyString) {
    logintoken_ = new ::std::string;
  }
  return logintoken_;
}
inline ::std::string* HyqLogin::release_logintoken() {
  clear_has_logintoken();
  if (logintoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logintoken_;
    logintoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hyq

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
